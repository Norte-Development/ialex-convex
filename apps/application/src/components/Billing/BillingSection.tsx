import { useState } from "react";
import { useQuery, useAction } from "convex/react";
import { api } from "../../../convex/_generated/api";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { ExternalLink, CreditCard, Zap } from "lucide-react";
import { PlanBadge } from "./PlanBadge";
import { UsageOverview } from "./UsageOverview";
import { PlanComparison } from "./PlanComparison";
import { useBillingData } from "./useBillingData";
import { useUpgrade } from "./useUpgrade";
import { PlanType } from "./types";
import { toast } from "sonner";
import { Id } from "../../../convex/_generated/dataModel";

interface BillingSectionProps {
  teamId?: Id<"teams">; // Optional team context
}

/**
 * Main billing section component for user preferences
 * Shows current plan, usage, upgrade options, and Stripe portal access
 */
export function BillingSection({ teamId }: BillingSectionProps) {
  const { plan, isLoading } = useBillingData({ 
    teamId 
  });
  const [isLoadingPortal, setIsLoadingPortal] = useState(false);
  
  const user = useQuery(api.functions.users.getCurrentUser, {});
  const isDevMode = useQuery(api.billing.features.isDevModeEnabled, {});
  // Note: The billing API types need to be regenerated by running `pnpm convex dev`
  // The portal action exists in convex/billing/subscriptions.ts but hasn't been added to generated types yet
  const portal = useAction(api.billing.subscriptions.portal);

  // Use the upgrade hook for handling plan upgrades (all user-level now)
  const { upgradeToPlan, upgradeToIndividual, isUpgrading } = useUpgrade();

  const handlePortalAccess = async () => {
    if (!user?._id) return;
    
    setIsLoadingPortal(true);
    try {
      const result = await portal({ entityId: user._id });
      
      if (result.url) {
        window.open(result.url, "_blank");
      } else {
        toast.error("No se pudo acceder al portal de facturaci칩n");
      }
    } catch (error) {
      toast.error("Error al abrir el portal de facturaci칩n");
      console.error(error);
    } finally {
      setIsLoadingPortal(false);
    }
  };

  const handleUpgrade = async () => {
    // Default upgrade from free is to premium_individual
    await upgradeToIndividual();
  };

  const handleSelectPlan = async (selectedPlan: PlanType) => {
    if (selectedPlan === "free" || selectedPlan === plan) {
      return; // Can't downgrade or select current plan
    }

    // All upgrades are user-level now, just call the appropriate function
    await upgradeToPlan(selectedPlan);
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="h-32 bg-gray-100 animate-pulse rounded-lg" />
        <div className="h-96 bg-gray-100 animate-pulse rounded-lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Dev Mode Indicator */}
      {isDevMode && (
        <Card className="border-yellow-500 bg-yellow-50">
          <CardContent className="pt-6">
            <div className="flex items-center gap-3">
              <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-300">
                <Zap className="size-3 mr-1" />
                Modo Desarrollo
              </Badge>
              <p className="text-sm text-yellow-800">
                Los l칤mites del plan est치n deshabilitados. Todos los recursos son ilimitados en este entorno de desarrollo.
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Current Plan Card */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Plan Actual</CardTitle>
              <CardDescription>
                Gestiona tu suscripci칩n y facturaci칩n
              </CardDescription>
            </div>
            {plan && <PlanBadge plan={plan} size="lg" />}
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Trial User - Has premium access but on trial */}
          {user?.trialStatus === "active" && user?.trialEndDate && (
            <div className="space-y-4">
              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-900 font-medium mb-2">
                  游꿀 Est치s en periodo de prueba Premium
                </p>
                <p className="text-sm text-blue-700">
                  Tienes acceso completo a todas las funciones premium. Actualiza ahora para continuar 
                  disfrutando de todas las funciones cuando termine tu prueba.
                </p>
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={handleUpgrade} 
                  className="w-full sm:w-auto"
                  disabled={isUpgrading}
                >
                  {isUpgrading ? "Procesando..." : "Actualizar a Premium"}
                </Button>
              </div>
              <p className="text-xs text-gray-500">
                Al actualizar, tu suscripci칩n comenzar치 inmediatamente y continuar치 despu칠s de tu periodo de prueba.
              </p>
            </div>
          )}

          {/* Free User - No trial */}
          {plan === "free" && user?.trialStatus !== "active" && (
            <div className="space-y-4">
              <p className="text-sm text-gray-600">
                Est치s usando el plan gratuito. Actualiza para desbloquear casos, 
                documentos y escritos ilimitados, adem치s de acceso a GPT-5.
              </p>
              <div className="flex flex-col sm:flex-row gap-3">
                {!user?.hasUsedTrial && (
                  <Button 
                    onClick={() => window.open('/signup?trial=true', '_blank')}
                    variant="outline"
                    className="w-full sm:w-auto"
                  >
                    游꿀 Probar Premium Gratis (14 d칤as)
                  </Button>
                )}
                <Button 
                  onClick={handleUpgrade} 
                  className="w-full sm:w-auto"
                  disabled={isUpgrading}
                >
                  {isUpgrading ? "Procesando..." : "Actualizar a Premium"}
                </Button>
              </div>
              {!user?.hasUsedTrial && (
                <p className="text-xs text-gray-500">
                  Prueba Premium Individual gratis por 14 d칤as. Sin compromiso.
                </p>
              )}
            </div>
          )}
          
          {/* Paid Premium User - Has active subscription */}
          {plan !== "free" && user?.trialStatus !== "active" && (
            <div className="space-y-4">
              <p className="text-sm text-gray-600">
                Tienes acceso completo a todas las funciones premium.
              </p>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  onClick={handlePortalAccess}
                  disabled={isLoadingPortal}
                >
                  <CreditCard className="size-4 mr-2" />
                  Portal de Facturaci칩n
                  <ExternalLink className="size-3 ml-1" />
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Separator />

      {/* Usage Overview */}
      <UsageOverview teamId={teamId} />

      <Separator />

      {/* Plan Comparison */}
      <PlanComparison 
        currentPlan={plan} 
        onSelectPlan={handleSelectPlan}
        isUpgrading={isUpgrading}
      />

      {/* Payment History Section (Future) */}
      <Card>
        <CardHeader>
          <CardTitle>Historial de Pagos</CardTitle>
          <CardDescription>
            Pr칩ximamente: Ver tu historial de facturas y pagos
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-gray-500 italic">
            Esta funcionalidad estar치 disponible pr칩ximamente.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

