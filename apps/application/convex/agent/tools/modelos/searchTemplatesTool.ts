import { createTool, ToolCtx } from "@convex-dev/agent";
import { api, internal } from "../../../_generated/api";
import { z } from "zod";
import { getUserAndCaseIds, createErrorResponse, validateStringParam, validateNumberParam } from "../utils";
import { Id } from "../../../_generated/dataModel";
import { createContentSummary, generateTemplateSummary } from "../utils/sanitizeContent";

/**
 * Tool for searching and retrieving template information.
 * Supports searching by name, category, content type, or getting specific templates.
 *
 * @description Tool for searching and retrieving template information. Supports searching by name, category, content type, or getting specific templates. Returns template summaries and brief descriptions without raw content or IDs. Perfect for finding and understanding templates before applying them to escritos.
 * @param {Object} args - Search parameters
 * @param {string} [args.searchTerm] - Search term to filter templates by name or description
 * @param {string} [args.category] - Filter by category (e.g., "Derecho Civil", "Derecho Mercantil")
 * @param {string} [args.contentType] - Filter by content type: "html" or "json"
 * @param {string} [args.templateId] - Get specific template by ID
 * @param {number} [args.limit=20] - Maximum number of results to return (default: 20, max: 100)
 * @returns {Promise<Object>} Search results with template details and content preview
 * @throws {Error} When user is not authenticated or search fails
 *
 * @example
 * // Search templates by name
 * await searchTemplatesTool.handler(ctx, {
 *   searchTerm: "demanda",
 *   limit: 10
 * });
 *
 * // Get templates by category
 * await searchTemplatesTool.handler(ctx, {
 *   category: "Derecho Civil",
 *   contentType: "html"
 * });
 *
 * // Get specific template
 * await searchTemplatesTool.handler(ctx, {
 *   templateId: "template_123"
 * });
 */
export const searchTemplatesTool = createTool({
  description: "Tool for searching and retrieving template information. Supports searching by name, category, content type, or getting specific templates. Returns template summaries and brief descriptions without raw content or IDs. Perfect for finding and understanding templates before applying them to escritos.",
  args: z.object({
    searchTerm: z.string().optional().describe("Search term to filter templates by name or description"),
    category: z.string().optional().describe("Filter by category (e.g., 'Derecho Civil', 'Derecho Mercantil')"),
    contentType: z.string().optional().describe("Filter by content type: 'html' or 'json'"),
    templateId: z.string().optional().describe("Get specific template by ID"),
    limit: z.number().min(1).max(100).optional().describe("Maximum number of results to return (default: 20, max: 100)")
  }).required({}),
  handler: async (ctx: ToolCtx, args: any) => {
    try {
      const {caseId, userId} = getUserAndCaseIds(ctx.userId as string);
      
      await ctx.runQuery(internal.auth_utils.internalCheckNewCaseAccess,{
        userId: userId as Id<"users">,
        caseId: caseId as Id<"cases">,
        requiredLevel: "basic"
      } )

      const searchTerm = args.searchTerm?.trim();
      const category = args.category?.trim();
      const contentType = args.contentType?.trim();
      const templateId = args.templateId?.trim();
      const limitError = validateNumberParam(args.limit, "limit", 1, 100, 20);
      if (limitError) return limitError;
      const limit = args.limit !== undefined ? args.limit : 20;
      
      if (templateId) {
        // Get specific template by ID
        const template = await ctx.runQuery(internal.functions.templates.internalGetModelo, {
          modeloId: templateId as Id<"modelos">,
          userId: userId as Id<"users">
        });
        
        if (!template) {
          return createErrorResponse(`Plantilla con ID "${templateId}" no encontrada`);
        }
        
        const contentPreview = template.content 
          ? (template.content.length > 200 
              ? template.content.substring(0, 200) + "..." 
              : template.content)
          : "Sin contenido";
        
        return `# üìÑ Plantilla Espec√≠fica

## Informaci√≥n de la Plantilla
- **ID de la Plantilla**: ${templateId}
- **Nombre**: ${template.name}
- **Categor√≠a**: ${template.category}
- **Tipo de Contenido**: ${template.content_type || 'No especificado'}
- **P√∫blica**: ${template.isPublic ? 'S√≠' : 'No'}
- **Usos**: ${template.usageCount}
- **Fecha de Creaci√≥n**: ${new Date(template._creationTime).toLocaleDateString('es-ES')}

## Descripci√≥n
${template.description || 'Sin descripci√≥n disponible'}

## Vista Previa del Contenido
\`\`\`${template.content_type || 'text'}
${contentPreview}
\`\`\`

## Tags
${template.tags && template.tags.length > 0 ? template.tags.map((tag: string) => `- ${tag}`).join('\n') : 'Sin tags'}

## Estado
- **Activa**: ${template.isActive ? 'S√≠' : 'No'}
- **Creada por**: ${template.createdBy === 'system' ? 'Sistema' : 'Usuario'}

---
*Plantilla espec√≠fica obtenida exitosamente*`;
      } else if (searchTerm) {
        // Search templates by search term
        const searchResult = await ctx.runQuery(internal.functions.templates.internalSearchModelos, {
          searchTerm,
          paginationOpts: { numItems: limit, cursor: null },
          category: category || undefined,
          content_type: contentType || undefined,
          userId: userId as Id<"users">
        });
        
        const templates = searchResult.page;
        
        if (templates.length === 0) {
          return `# üîç B√∫squeda de Plantillas

## T√©rmino de B√∫squeda
**Buscar**: "${searchTerm}"

## Resultados
‚ùå **No se encontraron plantillas** que coincidan con el t√©rmino de b√∫squeda.

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total Encontradas**: 0
- **Filtros Aplicados**: T√©rmino de b√∫squeda
${category ? `- **Categor√≠a**: ${category}` : ''}
${contentType ? `- **Tipo de Contenido**: ${contentType}` : ''}

## Sugerencias
1. Verifica la ortograf√≠a del t√©rmino de b√∫squeda
2. Intenta con t√©rminos m√°s generales
3. Usa filtros de categor√≠a para refinar la b√∫squeda

---
*B√∫squeda completada sin resultados*`;
        }
        
        const templatesList = templates.map((template: any, index: number) => {
          return `${index + 1}. ${generateTemplateSummary(template)}`;
        }).join('\n\n');
        
        return `# üîç B√∫squeda de Plantillas

## T√©rmino de B√∫squeda
**Buscar**: "${searchTerm}"

## Resultados Encontrados
${templatesList}

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total Encontradas**: ${templates.length}
- **M√°s resultados disponibles**: ${searchResult.isDone ? 'No' : 'S√≠'}
- **Filtros Aplicados**: T√©rmino de b√∫squeda
${category ? `- **Categor√≠a**: ${category}` : ''}
${contentType ? `- **Tipo de Contenido**: ${contentType}` : ''}

## Pr√≥ximos Pasos
1. Usa el nombre de una plantilla para obtener m√°s detalles
2. Aplica filtros adicionales para refinar la b√∫squeda
3. Considera usar t√©rminos de b√∫squeda m√°s espec√≠ficos

---
*B√∫squeda completada exitosamente*`;
      } else if (category || contentType) {
        // Filter templates by category and/or content type
        const filterResult = await ctx.runQuery(internal.functions.templates.internalGetModelos, {
          paginationOpts: { numItems: limit, cursor: null },
          category: category || undefined,
          content_type: contentType || undefined,
          userId: userId as Id<"users">
        });
        
        const templates = filterResult.page;
        
        if (templates.length === 0) {
          return `# üìã Plantillas Filtradas

## Filtros Aplicados
${category ? `- **Categor√≠a**: ${category}` : ''}
${contentType ? `- **Tipo de Contenido**: ${contentType}` : ''}

## Resultados
‚ùå **No se encontraron plantillas** que coincidan con los filtros aplicados.

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total Encontradas**: 0
- **Filtros Activos**: Categor√≠a y/o tipo de contenido

## Sugerencias
1. Verifica que la categor√≠a sea correcta
2. Intenta con un tipo de contenido diferente
3. Usa un t√©rmino de b√∫squeda para refinar los resultados

---
*Filtrado completado sin resultados*`;
        }
        
        const templatesList = templates.map((template: any, index: number) => {
          return `${index + 1}. ${generateTemplateSummary(template)}`;
        }).join('\n\n');
        
        return `# üìã Plantillas Filtradas

## Filtros Aplicados
${category ? `- **Categor√≠a**: ${category}` : ''}
${contentType ? `- **Tipo de Contenido**: ${contentType}` : ''}

## Resultados Encontrados
${templatesList}

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total Encontradas**: ${templates.length}
- **M√°s resultados disponibles**: ${filterResult.isDone ? 'No' : 'S√≠'}
- **Filtros Activos**: Categor√≠a y/o tipo de contenido

## Pr√≥ximos Pasos
1. Usa el nombre de una plantilla para obtener m√°s detalles
2. Combina con t√©rminos de b√∫squeda para resultados m√°s espec√≠ficos
3. Explora otras categor√≠as o tipos de contenido

---
*Filtrado completado exitosamente*`;
      } else {
        // Get all templates
        const allTemplatesResult = await ctx.runQuery(internal.functions.templates.internalGetModelos, {
          paginationOpts: { numItems: limit, cursor: null },
          userId: userId as Id<"users">
        });
        
        const templates = allTemplatesResult.page;
        
        if (templates.length === 0) {
          return `# üìã Todas las Plantillas

## B√∫squeda General
Sin filtros espec√≠ficos aplicados.

## Resultados
‚ùå **No hay plantillas disponibles** en el sistema.

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total de Plantillas**: 0
- **Plantillas P√∫blicas**: 0
- **Plantillas Privadas**: 0

## Sugerencias
1. Contacta al administrador para agregar plantillas al sistema
2. Crea tu primera plantilla personalizada
3. Verifica los permisos de acceso

---
*Listado general completado sin resultados*`;
        }
        
        const publicCount = templates.filter((t: any) => t.isPublic).length;
        const privateCount = templates.filter((t: any) => !t.isPublic).length;
        
        const templatesList = templates.map((template: any, index: number) => {
          return `${index + 1}. ${generateTemplateSummary(template)}`;
        }).join('\n\n');
        
        return `# üìã Todas las Plantillas

## B√∫squeda General
Sin filtros espec√≠ficos aplicados.

## Resultados Encontrados
${templatesList}

## Informaci√≥n Adicional
- **L√≠mite de Resultados**: ${limit}
- **Total de Plantillas**: ${templates.length}
- **Plantillas P√∫blicas**: ${publicCount}
- **Plantillas Privadas**: ${privateCount}
- **M√°s resultados disponibles**: ${allTemplatesResult.isDone ? 'No' : 'S√≠'}

## Pr√≥ximos Pasos
1. Usa el nombre de una plantilla para obtener m√°s detalles
2. Aplica filtros por categor√≠a o tipo de contenido
3. Usa t√©rminos de b√∫squeda para encontrar plantillas espec√≠ficas

---
*Listado general completado exitosamente*`;
      }
    } catch (error) {
      return createErrorResponse(`Error inesperado: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  },
} as any);
